# OverTheWire-Bandit


LEVEL 0 
*Level Goal
The goal of this level is for you to log into the game using SSH. The host to which you need to connect is bandit.labs.overthewire.org, on port 2220. The username is bandit0 and the password is bandit0. Once logged in, go to the Level 1 page to find out how to beat Level 1.*
- 
connect to SSH: "ssh bandit0@bandit.labs.overthewire.org -p 2220"
password: bandit0 


LEVEL 0-1 
*Level Goal
The password for the next level is stored in a file called readme located in the home directory. Use this password to log into bandit1 using SSH. Whenever you find a password for a level, use SSH (on port 2220) to log into that level and continue the game.*
-
ls -> found file "readme" 
cat readme 
password found: ZjLjTmM6FvvyRnrb2rfNWOZOTa6ip5If
exit 
**login at "ssh bandit1@bandit.labs.overthewire.org -p 2220"**
use password above 
**Repeat the process of exiting and logging in via SSH to progress to the next level, using the appropriate level numbers.**


LEVEL 1-2 
**Level Goal
The password for the next level is stored in a file called - located in the home directory* 
-
ls 
"-" file found
cat ./- 
password: 263JGJPfgU6LtdEvgfWU1XP5yac29mFx
* ./ means current directory, telling system look here for this folder "-"


LEVEL 2-3 
**Level Goal
The password for the next level is stored in a file called spaces in this filename located in the home directory**
-
ls 
file found: "spaces in this filename" 
cat spaces(I used tab) which autocompleted command to "cat spaces/ in/ this/ filename" 
password: MNk8KNH3Usiio41PRUEoDFPqfxLPlSmx
* Spaces in filenames: To handle spaces in filenames, use backslashes (\) to escape each space, or use quotes (" ").


LEVEL 3-4 
*Level Goal
The password for the next level is stored in a hidden file in the inhere directory.*
-
ls 
cd inhere
ls -a 
cat ...Hiding-From-You
password: 2WmrDFRmJIq3IPxneAaMGhap0pFhF3NJ


LEVEL 4-5
*Level Goal
The password for the next level is stored in the only human-readable file in the inhere directory. Tip: if your terminal is messed up, try the “reset” command.*
-
ls 
cd inhere
cat ./-file07 (password found) **use up/down arrow keys to not retype command a million times** 
password =: 4oQYVPkxZOOEOO5pTW81FB8j8lxXGUQw 


LEVEL 5-6
*Level Goal
The password for the next level is stored in a file somewhere under the inhere directory and has all of the following properties:
human-readable
1033 bytes in size
not executable*
-
ls 
cd inhere
uff, need a more effective way to search 
cd .. 
"find inhere/ -type f -size 1033c ! -executable" -> **inhere/maybehere07/.file2**
follow this path and open file 
password: HWasnPhtq9AVKe0dmk45nxy20cvUa6EG
*Find quick-sheet 
  find [where_to_search] [criteria] [actions]
  Most useful flags:
          type f → Only look for files (not folders)
          name "pattern" → Match file names (wildcards like *.txt work)
          size 1033c → Exact size in bytes (c = bytes, k = kilobytes, M = megabytes)
          readable → File is readable
          ! -executable → File is not executable (! = NOT)
          exec COMMAND {} \; → Run a command (like cat) on the result


LEVEL 6-7 
*Level Goal
The password for the next level is stored somewhere on the server and has all of the following properties:
owned by user bandit7
owned by group bandit6
33 bytes in size* 
- 
"find / -type f -size 33c -user bandit7 -group bandit6 2>/dev/null" 
once there is no crazy error messages run 
**"find / -type f -size 33c -user bandit7 -group bandit6 2>/dev/null -exec cat {} \;"** 
*2>/dev/null = take away permission denied error messages 
          2> — redirect stderr (error output)
          /dev/null — a "black hole" that discards anything sent to it  
*-exec cat {} \; 
          exec — tells find to run a command on the results
          cat — the command to run (shows file contents)
          {} — gets replaced by the found file path
          \; — ends the command (escaped ; to avoid shell confusion)
Password: morbNTDkSW6jIlUc0ymOdMaLnOlFVAaj


LEVEL 7-8 
*Level Goal
The password for the next level is stored in the file data.txt next to the word millionth*
- 
ls (found data.txt file) 
"grep millionth data.txt"
password: dfwvzFQi4mU0wfNbFOe9RoWskMLg7eEc
boom, easy 


LEVEL 8-9 
*Level Goal
The password for the next level is stored in the file data.txt and is the only line of text that occurs only once* 
- 
"sort data.txt | uniq -u"
          - sort data.txt — sorts the lines alphabetically (required because uniq only removes consecutive duplicates).
          - uniq -u — prints only the unique lines (those that occur exactly once).
password: 4CKMh1JI91bUIZZPXDqGanal4xvAg0JM


LEVEL 9-10 
*Level Goal
The password for the next level is stored in the file data.txt in one of the few human-readable strings, preceded by several ‘=’ characters.*
- 
"strings data.txt | grep '==='" 
          - strings data.txt → extracts all human-readable sequences from the file.
          - grep '==' → filters only the lines that include multiple equal signs, as stated in the prompt.
password: FGUW5ilLVJrxX9kMYMmlN4MgbpfMiqey


level 10-11
*Level Goal
The password for the next level is stored in the file data.txt, which contains base64 encoded data*
- 
"base64 -d data.txt"
          - base64 → the tool
          - -d → means "decode"
password: dtR173fZKb0RRsDFSGsg2RWnpNVj3qRr
can also use: "cat data.txt | base64 -d" when scripting with longer outputs or stringing commands 
*base64 is a form of encoding, not encryption! Base64 takes that binary data and translates it into plain letters/numbers/symbols. Essentially, helps humans and computers speak the same language without data getting lost in translation. 
          - Encoding: wrapping your data in bubble wrap so it can safely go through a mail slot.
          - Encryption: locking your data in a safe so only someone with a key can read it.


LEVEL 11-12
*Level Goal
The password for the next level is stored in the file data.txt, where all lowercase (a-z) and uppercase (A-Z) letters have been rotated by 13 positions*
-
"cat data.txt | tr 'A-Za-z' 'N-ZA-Mn-za-m'"
password: 7x16WNeHIi5YkIhWsfFIqoognUTyj9Q4 
*if you want to rotate with any other number like 1 or 5, you'll have to use a script/python. TR is a 1:1 replacement, cannot do complicated math
*ROT13 is not used for real encryption, it's scrambling for fun or delay 
*"Luke is he what?" 


LEVEL 12-13 
Level Goal
*The password for the next level is stored in the file data.txt, which is a hexdump of a file that has been repeatedly compressed. 
For this level it may be useful to create a directory under /tmp in which you can work. 
Use mkdir with a hard to guess directory name. Or better, use the command “mktemp -d”. 
Then copy the datafile using cp, and rename it using mv (read the manpages!)*
- 
"cd /tmp" -> changes current directory to temp folder, usually automatically deletes, safe place to experiement w/o clutter system 
"mktemp -d" -> creates temporary directory with random name 
"cd /tmp/tmp.VlRjfDOf0T" 
